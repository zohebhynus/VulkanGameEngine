#version 450

/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////
#define MAX_POINT_LIGHTS 10
#define MAX_SPOT_LIGHTS 10

const float M_PI = 3.1415926538;
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT INPUT
/////////////////////////////////////////////////////////////////////////////////////
layout(location = 0) in vec2 fragOffset;
/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT INPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT OUTPUT
/////////////////////////////////////////////////////////////////////////////////////
layout (location = 0) out vec4 outColor;
/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT OUTPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////
struct PointLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct SpotLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
	vec4 direction;    // direction x, y, z
	vec4 cutOffs;      // CutOffs x=innerCutoff y=outerCutoff

};

struct DirectionalLight
{
	vec4 direction;    // direction x, y, z, w=ambientStrength
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct EditorCameraData
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
};

layout(set = 0, binding = 0) uniform GlobalUbo
{
	EditorCameraData cameraData;

	DirectionalLight directionalLightData;

	PointLight pointLights[MAX_POINT_LIGHTS];
	SpotLight spotLights[MAX_SPOT_LIGHTS];
	int numOfActivePointLights;
	int numOfActiveSpotLights;
}globalUbo;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////
// CONSTANT PUSH : LIGHT OBJECT
/////////////////////////////////////////////////////////////////////////////////////
layout(push_constant) uniform Push 
{
	vec4 position;
	vec4 color;
	float radius;
}push;
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANT PUSH : LIGHT OBJECT
/////////////////////////////////////////////////////////////////////////////////////



void main()
{
	float dis = sqrt(dot(fragOffset, fragOffset));
	if (dis >= 1.0f)
	{
		discard;
	}
	outColor = vec4(push.color.xyz, 0.5f * (cos(dis * M_PI) + 1.0f));
}