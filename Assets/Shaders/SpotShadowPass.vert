#version 450 core

/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////
#define MAX_POINT_LIGHTS 10
#define MAX_SPOT_LIGHTS 10
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// VERTEX INPUT
/////////////////////////////////////////////////////////////////////////////////////
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 color;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec2 uv;
/////////////////////////////////////////////////////////////////////////////////////
// VERTEX INPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// VERTEX OUTPUT
/////////////////////////////////////////////////////////////////////////////////////
layout (location = 0) out vec4 fragPos;
/////////////////////////////////////////////////////////////////////////////////////
// VERTEX OUTPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////
struct PointLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct SpotLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
	vec4 direction;    // direction x, y, z
	vec4 cutOffs;      // CutOffs x=innerCutoff y=outerCutoff

};

struct DirectionalLight
{
	vec4 direction;    // direction x, y, z, w=ambientStrength
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct EditorCameraData
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
};

layout(set = 0, binding = 0) uniform GlobalUbo
{
	EditorCameraData cameraData;

	DirectionalLight directionalLightData;

	PointLight pointLights[MAX_POINT_LIGHTS];
	SpotLight spotLights[MAX_SPOT_LIGHTS];
	int numOfActivePointLights;
	int numOfActiveSpotLights;
}globalUbo;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 1 : SPOT LIGHT PROJECTION FOR SHADOW MAPS
/////////////////////////////////////////////////////////////////////////////////////
layout(set = 1, binding = 0) uniform SpotShadowPassUBO
{
	mat4 lightProjection;
}spotShadowPassUBO;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 1 : SPOT LIGHT PROJECTION FOR SHADOW MAPS
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// PUSH CONSTANTS : SPOT SHADOW
/////////////////////////////////////////////////////////////////////////////////////
layout(push_constant) uniform Push 
{
	mat4 modelMatrix;
	int lightCount;
}push;
/////////////////////////////////////////////////////////////////////////////////////
// PUSH CONSTANTS : SPOT SHADOW
/////////////////////////////////////////////////////////////////////////////////////

void main()
{
	fragPos = push.modelMatrix * vec4(position, 1.0f);
	gl_Position = spotShadowPassUBO.lightProjection * fragPos;
}

