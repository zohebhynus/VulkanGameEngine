#version 450

/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////
#define MAX_POINT_LIGHTS 10
#define MAX_SPOT_LIGHTS 10

#define CASCADE_SHADOW_MAP_COUNT 4

const mat4 bias = mat4( 
  0.5, 0.0, 0.0, 0.0,
  0.0, 0.5, 0.0, 0.0,
  0.0, 0.0, 1.0, 0.0,
  0.5, 0.5, 0.0, 1.0 );
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// VERTEX INPUT
/////////////////////////////////////////////////////////////////////////////////////
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 color;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec2 uv;
/////////////////////////////////////////////////////////////////////////////////////
// VERTEX INPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// VERTEX OUTPUT
/////////////////////////////////////////////////////////////////////////////////////
layout(location = 0) out vec3 fragColor;
layout(location = 1) out vec3 fragModelWorldSpace; // outEyePos
layout(location = 2) out vec3 fragNormalWorldSpace;
layout(location = 3) out vec3 fragTangent;
layout(location = 4) out vec2 fragUV;

layout(location = 5) out vec4 fragViewPos;

layout(location = 7) out vec3 fragModelPos; //outWorldPos
layout(location = 8) out vec3 fragLightVec; //outLightVec

layout(location = 9) out vec4 fragSpotLightWorldSpace[MAX_SPOT_LIGHTS];
/////////////////////////////////////////////////////////////////////////////////////
// VERTEX OUTPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////
struct PointLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct SpotLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
	vec4 direction;    // direction x, y, z
	vec4 cutOffs;      // CutOffs x=innerCutoff y=outerCutoff

};

struct DirectionalLight
{
	vec4 direction;    // direction x, y, z, w=ambientStrength
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct EditorCameraData
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
};

layout(set = 0, binding = 0) uniform GlobalUbo
{
	EditorCameraData cameraData;

	DirectionalLight directionalLightData;

	PointLight pointLights[MAX_POINT_LIGHTS];
	SpotLight spotLights[MAX_SPOT_LIGHTS];
	int numOfActivePointLights;
	int numOfActiveSpotLights;
}globalUbo;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 4,1 : SPOT LIGHT PROJECTION FOR SHADOW MAP
/////////////////////////////////////////////////////////////////////////////////////
layout(set = 4, binding = 1) uniform SpotShadowLightProjectionUBO
{
	mat4 lightProjection[MAX_SPOT_LIGHTS];
}spotShadowLightProjectionUBO;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 4,1 : SPOT LIGHT PROJECTION FOR SHADOW MAP
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// PUSH CONSTANTS : MAIN
/////////////////////////////////////////////////////////////////////////////////////
layout(push_constant) uniform Push 
{
	mat4 modelMatrix;
	mat4 normalMatrix;
}push;
/////////////////////////////////////////////////////////////////////////////////////
// PUSH CONSTANTS : MAIN
/////////////////////////////////////////////////////////////////////////////////////



void main()
{
	vec4 modelWorldSpace = push.modelMatrix * vec4(position, 1.0f);
	gl_Position = globalUbo.cameraData.projectionMatrix * globalUbo.cameraData.viewMatrix * modelWorldSpace;

	fragNormalWorldSpace = mat3(push.normalMatrix) * normal;
	fragModelWorldSpace = modelWorldSpace.xyz; // outEyePos
	fragColor = color;
	fragTangent = mat3(push.normalMatrix) * tangent;
	fragUV = uv;

	fragViewPos = globalUbo.cameraData.viewMatrix * modelWorldSpace;

	for(int i = 0; i < MAX_SPOT_LIGHTS; i++)
	{
		fragSpotLightWorldSpace[i] = bias * spotShadowLightProjectionUBO.lightProjection[i] * modelWorldSpace;
	}

	fragModelPos = position; // outWorldPos
	fragLightVec = normalize(globalUbo.pointLights[0].position.xyz - position.xyz); //outLightVec
}