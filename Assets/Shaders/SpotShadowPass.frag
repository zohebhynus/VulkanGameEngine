#version 450 core
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////
#define MAX_POINT_LIGHTS 10
#define MAX_SPOT_LIGHTS 10
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT INPUT
/////////////////////////////////////////////////////////////////////////////////////
layout (location = 0) in vec4 fragPos;
layout (location = 1) in float liCount;
/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT INPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT OUTPUT
/////////////////////////////////////////////////////////////////////////////////////
layout (location = 0) out float outFragColor;
/////////////////////////////////////////////////////////////////////////////////////
// FRAGMENT OUTPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////
struct PointLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct SpotLight
{
	vec4 position;     // position x,y,z
	vec4 color;        // color r=x, g=y, b=z, a=intensity
	vec4 direction;    // direction x, y, z
	vec4 cutOffs;      // CutOffs x=innerCutoff y=outerCutoff

};

struct DirectionalLight
{
	vec4 direction;    // direction x, y, z, w=ambientStrength
	vec4 color;        // color r=x, g=y, b=z, a=intensity
};

struct EditorCameraData
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
};

layout(set = 0, binding = 0) uniform GlobalUbo
{
	EditorCameraData cameraData;

	DirectionalLight directionalLightData;

	PointLight pointLights[MAX_POINT_LIGHTS];
	SpotLight spotLights[MAX_SPOT_LIGHTS];
	int numOfActivePointLights;
	int numOfActiveSpotLights;
}globalUbo;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 0 : GLOBAL
/////////////////////////////////////////////////////////////////////////////////////


void main()
{
	float dist = length(fragPos.xyz - globalUbo.spotLights[int(liCount)].position.xyz);
	outFragColor = dist;
}