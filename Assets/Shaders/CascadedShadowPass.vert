#version 450 core

/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////
#define CASCADE_SHADOW_MAP_COUNT 4
/////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// VERTEX INPUT
/////////////////////////////////////////////////////////////////////////////////////
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 color;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec2 uv;
/////////////////////////////////////////////////////////////////////////////////////
// VERTEX INPUT
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 1 : DIRECTIONAL LIGHT PROJECTIONS FOR CASCADED SHADOW MAP
/////////////////////////////////////////////////////////////////////////////////////
layout(set = 1, binding = 0) uniform CascadedShadowPassUBO
{
	mat4 lightProjection[CASCADE_SHADOW_MAP_COUNT];
	vec4 cascadeSplits;
}cascadedShadowPassUBO;
/////////////////////////////////////////////////////////////////////////////////////
// DESCRIPTOR SET 1 : DIRECTIONAL LIGHT PROJECTIONS FOR CASCADED SHADOW MAP
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// PUSH CONSTANTS : CASCADED SHADOW MAP
/////////////////////////////////////////////////////////////////////////////////////
layout(push_constant) uniform Push 
{
	mat4 modelMatrix;
	int cascadeIndex;
}push;
/////////////////////////////////////////////////////////////////////////////////////
// PUSH CONSTANTS : CASCADED SHADOW MAP
/////////////////////////////////////////////////////////////////////////////////////

void main()
{
	gl_Position = cascadedShadowPassUBO.lightProjection[push.cascadeIndex] * push.modelMatrix * vec4(position, 1.0f);
}